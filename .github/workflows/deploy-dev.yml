name: Deploy to Development

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ap-northeast-1
  PROJECT_NAME: csr-lambda-api
  ENVIRONMENT: dev

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build
          npm run export

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd backend
          python -m pytest tests/ -v

      - name: Package backend for Lambda
        run: |
          cd backend
          zip -r ../lambda-deployment.zip . -x "tests/*" "__pycache__/*" "*.pyc"

      - name: Deploy infrastructure
        run: |
          # IAM „É≠„Éº„É´„ÅÆ„Éá„Éó„É≠„Ç§
          aws cloudformation deploy \
            --template-file infrastructure/shared/iam-roles.yaml \
            --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-iam-roles \
            --parameter-overrides \
              ProjectName=${{ env.PROJECT_NAME }} \
              Environment=${{ env.ENVIRONMENT }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }}

          # „É°„Ç§„É≥„Ç§„É≥„Éï„É©„Çπ„Éà„É©„ÇØ„ÉÅ„É£„ÅÆ„Éá„Éó„É≠„Ç§
          aws cloudformation deploy \
            --template-file infrastructure/${{ env.ENVIRONMENT }}/main.yaml \
            --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-main \
            --parameter-overrides \
              ProjectName=${{ env.PROJECT_NAME }} \
              Environment=${{ env.ENVIRONMENT }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }}

      - name: Deploy frontend to S3
        run: |
          # S3 „Éê„Ç±„ÉÉ„ÉàÂêç„ÇíÂèñÂæó
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-main \
            --query "Stacks[0].Outputs[?OutputKey=='FrontendBucketName'].OutputValue" \
            --output text \
            --region ${{ env.AWS_REGION }})

          # „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Éï„Ç°„Ç§„É´„ÇíS3„Å´„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ
          aws s3 sync frontend/out/ s3://$BUCKET_NAME --delete

          # CloudFront „Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÁÑ°ÂäπÂåñ
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-main \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" \
            --output text \
            --region ${{ env.AWS_REGION }})

          if [ "$DISTRIBUTION_ID" != "None" ] && [ -n "$DISTRIBUTION_ID" ]; then
            aws cloudfront create-invalidation \
              --distribution-id $DISTRIBUTION_ID \
              --paths "/*"
          fi

      - name: Deploy backend Lambda
        run: |
          # Lambda Èñ¢Êï∞Âêç„ÇíÂèñÂæó
          FUNCTION_NAME=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-main \
            --query "Stacks[0].Outputs[?OutputKey=='LambdaFunctionName'].OutputValue" \
            --output text \
            --region ${{ env.AWS_REGION }})

          # Lambda Èñ¢Êï∞„ÇíÊõ¥Êñ∞
          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --zip-file fileb://lambda-deployment.zip \
            --region ${{ env.AWS_REGION }}

      - name: Run integration tests
        run: |
          # API Gateway URL „ÇíÂèñÂæó
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-main \
            --query "Stacks[0].Outputs[?OutputKey=='ApiGatewayUrl'].OutputValue" \
            --output text \
            --region ${{ env.AWS_REGION }})

          # „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
          echo "Testing API health check..."
          curl -f "$API_URL/health" || exit 1

          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Frontend URL: https://$(aws cloudformation describe-stacks \
            --stack-name ${{ env.PROJECT_NAME }}-${{ env.ENVIRONMENT }}-main \
            --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDomainName'].OutputValue" \
            --output text \
            --region ${{ env.AWS_REGION }})"
          echo "üöÄ API URL: $API_URL"
