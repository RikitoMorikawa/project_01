name: Deploy to Development

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

env:
  AWS_REGION: ap-northeast-1
  ENVIRONMENT: dev
  PROJECT_NAME: csr-lambda-api

jobs:
  test:
    name: テストとビルド検証
    runs-on: ubuntu-latest

    steps:
      - name: コードをチェックアウト
        uses: actions/checkout@v4

      - name: Python 環境をセットアップ
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Node.js 環境をセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: バックエンド依存関係をインストール
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: フロントエンド依存関係をインストール
        run: |
          cd frontend
          npm ci

      - name: バックエンドテストを実行
        run: |
          cd backend
          # テストファイルが存在する場合のみ実行
          if [ -d "tests" ] && [ "$(find tests -name '*.py' | wc -l)" -gt 0 ]; then
            python -m pytest tests/ -v --tb=short
          else
            echo "テストファイルが見つかりません。テストをスキップします。"
          fi

      - name: フロントエンドテストを実行
        run: |
          cd frontend
          # リント実行
          if npm run lint --silent 2>/dev/null; then
            npm run lint
          else
            echo "リントスクリプトが見つかりません。スキップします。"
          fi

          # 型チェック実行
          if npm run type-check --silent 2>/dev/null; then
            npm run type-check
          else
            echo "型チェックスクリプトが見つかりません。スキップします。"
          fi

      - name: フロントエンドビルドテスト
        run: |
          cd frontend
          # 環境変数ファイルの作成（テスト用）
          cat > .env.production << EOF
          NEXT_PUBLIC_API_URL=https://test-api.example.com
          NEXT_PUBLIC_ENVIRONMENT=dev
          NEXT_PUBLIC_AWS_REGION=ap-northeast-1
          EOF

          # ビルドテスト
          npm run build

      - name: バックエンドパッケージングテスト
        run: |
          # ビルドディレクトリの作成
          mkdir -p build/backend

          # バックエンドファイルのコピー
          cp -r backend/app build/backend/
          cp backend/lambda_handler.py build/backend/
          cp backend/requirements.txt build/backend/

          # 依存関係のインストール
          cd build/backend
          pip install -r requirements.txt -t .

          # 不要なファイルを削除
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -type f -name "*.pyc" -delete 2>/dev/null || true
          find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true

          # デプロイメントパッケージの作成
          zip -r ../lambda-deployment-package.zip . -x "*.git*" "*.DS_Store*" "tests/*" "*.pytest_cache*"

          # パッケージサイズの確認
          PACKAGE_SIZE=$(stat -f%z ../lambda-deployment-package.zip 2>/dev/null || stat -c%s ../lambda-deployment-package.zip)
          echo "Lambda パッケージサイズ: $PACKAGE_SIZE bytes"

          # 50MB制限の確認
          if [ $PACKAGE_SIZE -gt 52428800 ]; then
            echo "警告: Lambdaパッケージが50MBを超えています"
          fi

  deploy:
    name: 開発環境デプロイ
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    environment:
      name: development
      url: ${{ steps.deploy-info.outputs.frontend-url }}

    steps:
      - name: コードをチェックアウト
        uses: actions/checkout@v4

      - name: Python 環境をセットアップ
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Node.js 環境をセットアップ
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: AWS 認証情報を設定
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: AWS 認証情報を確認
        run: |
          echo "AWS認証情報を確認中..."
          aws sts get-caller-identity
          export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
          echo "STACK_PREFIX=${PROJECT_NAME}-${ENVIRONMENT}" >> $GITHUB_ENV

      - name: 必要なツールをインストール
        run: |
          sudo apt-get update
          sudo apt-get install -y jq zip unzip

      - name: インフラストラクチャをデプロイ
        run: |
          echo "=== インフラストラクチャデプロイ開始 ==="
          cd infrastructure/dev
          chmod +x deploy.sh
          ./deploy.sh

      - name: バックエンドをビルド
        run: |
          echo "=== バックエンドビルド開始 ==="

          # ビルドディレクトリの作成
          mkdir -p build/backend

          # バックエンドファイルのコピー
          cp -r backend/app build/backend/
          cp backend/lambda_handler.py build/backend/
          cp backend/requirements.txt build/backend/

          # 依存関係のインストール
          cd build/backend
          pip install --upgrade pip
          pip install -r requirements.txt -t .

          # 不要なファイルを削除
          find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          find . -type f -name "*.pyc" -delete 2>/dev/null || true
          find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true

          # デプロイメントパッケージの作成
          zip -r ../lambda-deployment-package.zip . -x "*.git*" "*.DS_Store*" "tests/*" "*.pytest_cache*"
          cd ../..

      - name: バックエンドをデプロイ
        run: |
          echo "=== バックエンドデプロイ開始 ==="

          # S3バケットの設定
          LAMBDA_BUCKET="${PROJECT_NAME}-${ENVIRONMENT}-lambda-deployments-${AWS_ACCOUNT_ID}"
          LAMBDA_KEY="lambda-deployment-package-$(date +%Y%m%d-%H%M%S).zip"

          # S3バケットが存在しない場合は作成
          if ! aws s3 ls "s3://$LAMBDA_BUCKET" --region "$AWS_REGION" >/dev/null 2>&1; then
            echo "Lambda デプロイメント用 S3 バケットを作成中: $LAMBDA_BUCKET"
            aws s3 mb "s3://$LAMBDA_BUCKET" --region "$AWS_REGION"
            aws s3api put-bucket-versioning --bucket "$LAMBDA_BUCKET" --versioning-configuration Status=Enabled --region "$AWS_REGION"
          fi

          # デプロイメントパッケージをS3にアップロード
          echo "Lambdaパッケージを S3 にアップロード中..."
          aws s3 cp "build/lambda-deployment-package.zip" "s3://$LAMBDA_BUCKET/$LAMBDA_KEY" --region "$AWS_REGION"

          # Lambda関数の更新
          if aws lambda get-function --function-name "${STACK_PREFIX}-api-function" --region "$AWS_REGION" >/dev/null 2>&1; then
            echo "Lambda関数を更新中..."
            aws lambda update-function-code \
              --function-name "${STACK_PREFIX}-api-function" \
              --s3-bucket "$LAMBDA_BUCKET" \
              --s3-key "$LAMBDA_KEY" \
              --region "$AWS_REGION"
            
            # 関数の更新完了を待機
            aws lambda wait function-updated \
              --function-name "${STACK_PREFIX}-api-function" \
              --region "$AWS_REGION"
            
            echo "Lambda関数の更新が完了しました"
          else
            echo "Lambda関数が見つかりません。インフラストラクチャを先にデプロイしてください。"
          fi

      - name: フロントエンドをビルド
        run: |
          echo "=== フロントエンドビルド開始 ==="
          cd frontend

          # 依存関係のインストール
          npm ci

          # API Gateway URLを取得
          API_URL=""
          if aws cloudformation describe-stacks --stack-name "${STACK_PREFIX}-api" --region "$AWS_REGION" >/dev/null 2>&1; then
            API_URL=$(aws cloudformation describe-stacks \
              --stack-name "${STACK_PREFIX}-api" \
              --region "$AWS_REGION" \
              --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
              --output text 2>/dev/null || echo "")
          fi

          echo "API URL: $API_URL"

          # 環境変数ファイルの作成
          cat > .env.production << EOF
          NEXT_PUBLIC_API_URL=${API_URL}
          NEXT_PUBLIC_ENVIRONMENT=${ENVIRONMENT}
          NEXT_PUBLIC_AWS_REGION=${AWS_REGION}
          EOF

          # Next.js ビルド
          npm run build
          cd ..

      - name: フロントエンドをデプロイ
        run: |
          echo "=== フロントエンドデプロイ開始 ==="

          # S3バケット名を取得
          FRONTEND_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name "${STACK_PREFIX}-frontend" \
            --region "$AWS_REGION" \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendS3BucketName`].OutputValue' \
            --output text 2>/dev/null || echo "")

          if [[ -n "$FRONTEND_BUCKET" ]]; then
            echo "フロントエンドファイルを S3 にアップロード中: $FRONTEND_BUCKET"
            
            # 既存のファイルを削除
            aws s3 rm "s3://$FRONTEND_BUCKET" --recursive --region "$AWS_REGION" || true
            
            # ビルドファイルをS3にアップロード
            cd frontend
            aws s3 sync out/ "s3://$FRONTEND_BUCKET" \
              --region "$AWS_REGION" \
              --delete \
              --cache-control "public, max-age=31536000" \
              --exclude "*.html" \
              --exclude "*.json"
            
            # HTMLファイルは短いキャッシュ時間で設定
            aws s3 sync out/ "s3://$FRONTEND_BUCKET" \
              --region "$AWS_REGION" \
              --cache-control "public, max-age=300" \
              --include "*.html" \
              --include "*.json"
            
            cd ..
            echo "フロントエンドのデプロイが完了しました"
          else
            echo "フロントエンド S3 バケットが見つかりません。"
            exit 1
          fi

      - name: デプロイメント情報を取得
        id: deploy-info
        run: |
          echo "=== デプロイメント情報 ==="

          # API Gateway URL
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name "${STACK_PREFIX}-api" \
            --region "$AWS_REGION" \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
            --output text 2>/dev/null || echo "取得できませんでした")
          echo "API Gateway URL: $API_URL"
          echo "api-url=$API_URL" >> $GITHUB_OUTPUT

          # S3 Website URL
          S3_URL=$(aws cloudformation describe-stacks \
            --stack-name "${STACK_PREFIX}-frontend" \
            --region "$AWS_REGION" \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendS3BucketWebsiteURL`].OutputValue' \
            --output text 2>/dev/null || echo "取得できませんでした")
          echo "S3 Website URL: $S3_URL"
          echo "frontend-url=$S3_URL" >> $GITHUB_OUTPUT

          # データベースエンドポイント
          DB_ENDPOINT=$(aws cloudformation describe-stacks \
            --stack-name "${STACK_PREFIX}-database" \
            --region "$AWS_REGION" \
            --query 'Stacks[0].Outputs[?OutputKey==`DatabaseClusterEndpoint`].OutputValue' \
            --output text 2>/dev/null || echo "取得できませんでした")
          echo "Database Endpoint: $DB_ENDPOINT"
          echo "database-endpoint=$DB_ENDPOINT" >> $GITHUB_OUTPUT

      - name: デプロイメント完了通知
        run: |
          echo "🎉 開発環境へのデプロイが完了しました！"
          echo ""
          echo "📊 デプロイメント情報:"
          echo "- 環境: $ENVIRONMENT"
          echo "- API URL: ${{ steps.deploy-info.outputs.api-url }}"
          echo "- フロントエンド URL: ${{ steps.deploy-info.outputs.frontend-url }}"
          echo "- データベース: ${{ steps.deploy-info.outputs.database-endpoint }}"
          echo ""
          echo "🔗 アプリケーションにアクセス: ${{ steps.deploy-info.outputs.frontend-url }}"

      - name: ヘルスチェック実行
        run: |
          echo "=== ヘルスチェック実行 ==="

          API_URL="${{ steps.deploy-info.outputs.api-url }}"
          if [[ "$API_URL" != "取得できませんでした" && -n "$API_URL" ]]; then
            echo "API ヘルスチェックを実行中..."
            
            # 最大5回リトライ
            for i in {1..5}; do
              if curl -f -s "${API_URL}/health" >/dev/null; then
                echo "✅ API ヘルスチェック成功"
                break
              else
                echo "⏳ API ヘルスチェック失敗 (試行 $i/5)"
                if [ $i -eq 5 ]; then
                  echo "❌ API ヘルスチェックが失敗しました"
                else
                  sleep 10
                fi
              fi
            done
          else
            echo "⚠️ API URLが取得できないため、ヘルスチェックをスキップします"
          fi
