AWSTemplateFormatVersion: "2010-09-09"
Description: "CSR Lambda API System - Production Environment CloudWatch Monitoring and Alarms"

Parameters:
  ProjectName:
    Type: String
    Default: csr-lambda-api
    Description: プロジェクト名

  Environment:
    Type: String
    Default: prod
    Description: 環境名

  NotificationEmail:
    Type: String
    Description: アラート通知用メールアドレス（必須）

  SlackWebhookUrl:
    Type: String
    Default: ""
    Description: Slack Webhook URL（オプション）
    NoEcho: true

  PagerDutyIntegrationKey:
    Type: String
    Default: ""
    Description: PagerDuty Integration Key（オプション）
    NoEcho: true

Conditions:
  HasSlackWebhook: !Not [!Equals [!Ref SlackWebhookUrl, ""]]
  HasPagerDuty: !Not [!Equals [!Ref PagerDutyIntegrationKey, ""]]

Resources:
  # SNS トピック（アラート通知用）
  AlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ProjectName}-${Environment}-alerts"
      DisplayName: !Sub "${ProjectName} ${Environment} Critical Alerts"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-alerts"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # 警告レベル用 SNS トピック
  WarningTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${ProjectName}-${Environment}-warnings"
      DisplayName: !Sub "${ProjectName} ${Environment} Warnings"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-warnings"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # メール通知サブスクリプション（クリティカル）
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AlertTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # メール通知サブスクリプション（警告）
  WarningEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref WarningTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # Lambda 関数監視用 CloudWatch アラーム（本番環境用に厳格化）
  LambdaErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-lambda-error-rate"
      AlarmDescription: "Lambda 関数のエラー率が高い場合にアラート（本番環境）"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1 # 本番環境では1つでもエラーがあればアラート
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value:
            Fn::ImportValue: !Sub "${ProjectName}-${Environment}-lambda-function-name"
      AlarmActions:
        - !Ref AlertTopic
      OKActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-lambda-error-rate"
        - Key: Environment
          Value: !Ref Environment

  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-lambda-duration"
      AlarmDescription: "Lambda 関数の実行時間が長い場合にアラート（本番環境）"
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 20000 # 20秒（本番環境では厳しめ）
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value:
            Fn::ImportValue: !Sub "${ProjectName}-${Environment}-lambda-function-name"
      AlarmActions:
        - !Ref WarningTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-lambda-duration"
        - Key: Environment
          Value: !Ref Environment

  LambdaThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-lambda-throttles"
      AlarmDescription: "Lambda 関数がスロットルされた場合にアラート（本番環境）"
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value:
            Fn::ImportValue: !Sub "${ProjectName}-${Environment}-lambda-function-name"
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-lambda-throttles"
        - Key: Environment
          Value: !Ref Environment

  LambdaConcurrentExecutionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-lambda-concurrent-executions"
      AlarmDescription: "Lambda 関数の同時実行数が多い場合にアラート（本番環境）"
      MetricName: ConcurrentExecutions
      Namespace: AWS/Lambda
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 800 # 本番環境の同時実行数制限（1000の80%）
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value:
            Fn::ImportValue: !Sub "${ProjectName}-${Environment}-lambda-function-name"
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-lambda-concurrent-executions"
        - Key: Environment
          Value: !Ref Environment

  LambdaProvisionedConcurrencyUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-lambda-provisioned-concurrency-utilization"
      AlarmDescription: "Lambda Provisioned Concurrency の使用率が高い場合にアラート"
      MetricName: ProvisionedConcurrencyUtilization
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 0.8 # 80%
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value:
            Fn::ImportValue: !Sub "${ProjectName}-${Environment}-lambda-function-name"
      AlarmActions:
        - !Ref WarningTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-lambda-provisioned-concurrency-utilization"
        - Key: Environment
          Value: !Ref Environment

  # API Gateway 監視用 CloudWatch アラーム（本番環境用）
  ApiGateway4xxErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-api-4xx-errors"
      AlarmDescription: "API Gateway の 4xx エラー率が高い場合にアラート（本番環境）"
      MetricName: 4XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10 # 本番環境では10個以上でアラート
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub "${ProjectName}-${Environment}-api"
        - Name: Stage
          Value: v1
      AlarmActions:
        - !Ref WarningTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-api-4xx-errors"
        - Key: Environment
          Value: !Ref Environment

  ApiGateway5xxErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-api-5xx-errors"
      AlarmDescription: "API Gateway の 5xx エラー率が高い場合にアラート（本番環境）"
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub "${ProjectName}-${Environment}-api"
        - Name: Stage
          Value: v1
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-api-5xx-errors"
        - Key: Environment
          Value: !Ref Environment

  ApiGatewayLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-api-latency"
      AlarmDescription: "API Gateway のレスポンス時間が長い場合にアラート（本番環境）"
      MetricName: Latency
      Namespace: AWS/ApiGateway
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 2000 # 2秒（本番環境では厳しめ）
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub "${ProjectName}-${Environment}-api"
        - Name: Stage
          Value: v1
      AlarmActions:
        - !Ref WarningTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-api-latency"
        - Key: Environment
          Value: !Ref Environment

  # Aurora データベース監視用 CloudWatch アラーム（本番環境用）
  DatabaseCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-db-cpu-utilization"
      AlarmDescription: "Aurora データベースの CPU 使用率が高い場合にアラート（本番環境）"
      MetricName: CPUUtilization
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80 # 本番環境では80%でアラート
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBClusterIdentifier
          Value: !Sub "${ProjectName}-${Environment}-aurora-cluster"
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-db-cpu-utilization"
        - Key: Environment
          Value: !Ref Environment

  DatabaseConnectionsAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-db-connections"
      AlarmDescription: "Aurora データベースの接続数が多い場合にアラート（本番環境）"
      MetricName: DatabaseConnections
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 150 # t3.medium の最大接続数の75%
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBClusterIdentifier
          Value: !Sub "${ProjectName}-${Environment}-aurora-cluster"
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-db-connections"
        - Key: Environment
          Value: !Ref Environment

  DatabaseReadLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-db-read-latency"
      AlarmDescription: "Aurora データベースの読み取りレイテンシが高い場合にアラート（本番環境）"
      MetricName: ReadLatency
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 0.1 # 100ms（本番環境では厳しめ）
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBClusterIdentifier
          Value: !Sub "${ProjectName}-${Environment}-aurora-cluster"
      AlarmActions:
        - !Ref WarningTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-db-read-latency"
        - Key: Environment
          Value: !Ref Environment

  DatabaseWriteLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-db-write-latency"
      AlarmDescription: "Aurora データベースの書き込みレイテンシが高い場合にアラート（本番環境）"
      MetricName: WriteLatency
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 0.1 # 100ms（本番環境では厳しめ）
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DBClusterIdentifier
          Value: !Sub "${ProjectName}-${Environment}-aurora-cluster"
      AlarmActions:
        - !Ref WarningTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-db-write-latency"
        - Key: Environment
          Value: !Ref Environment

  DatabaseFreeableMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-db-freeable-memory"
      AlarmDescription: "Aurora データベースの使用可能メモリが少ない場合にアラート"
      MetricName: FreeableMemory
      Namespace: AWS/RDS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 1073741824 # 1GB
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: DBClusterIdentifier
          Value: !Sub "${ProjectName}-${Environment}-aurora-cluster"
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-db-freeable-memory"
        - Key: Environment
          Value: !Ref Environment

  # CloudFront 監視用 CloudWatch アラーム（本番環境用）
  CloudFrontErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-cloudfront-error-rate"
      AlarmDescription: "CloudFront のエラー率が高い場合にアラート（本番環境）"
      MetricName: ErrorRate
      Namespace: AWS/CloudFront
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 1 # 1%（本番環境では厳しめ）
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DistributionId
          Value:
            Fn::ImportValue: !Sub "${ProjectName}-${Environment}-cloudfront-distribution-id"
      AlarmActions:
        - !Ref AlertTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-cloudfront-error-rate"
        - Key: Environment
          Value: !Ref Environment

  CloudFrontOriginLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-cloudfront-origin-latency"
      AlarmDescription: "CloudFront のオリジンレイテンシが高い場合にアラート（本番環境）"
      MetricName: OriginLatency
      Namespace: AWS/CloudFront
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 1000 # 1秒（本番環境では厳しめ）
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DistributionId
          Value:
            Fn::ImportValue: !Sub "${ProjectName}-${Environment}-cloudfront-distribution-id"
      AlarmActions:
        - !Ref WarningTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-cloudfront-origin-latency"
        - Key: Environment
          Value: !Ref Environment

  CloudFrontCacheHitRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${ProjectName}-${Environment}-cloudfront-cache-hit-rate"
      AlarmDescription: "CloudFront のキャッシュヒット率が低い場合にアラート"
      MetricName: CacheHitRate
      Namespace: AWS/CloudFront
      Statistic: Average
      Period: 900 # 15分
      EvaluationPeriods: 2
      Threshold: 80 # 80%
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: DistributionId
          Value:
            Fn::ImportValue: !Sub "${ProjectName}-${Environment}-cloudfront-distribution-id"
      AlarmActions:
        - !Ref WarningTopic
      TreatMissingData: notBreaching
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-cloudfront-cache-hit-rate"
        - Key: Environment
          Value: !Ref Environment

  # カスタムメトリクス用 CloudWatch ログ グループ
  ApplicationMetricsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProjectName}-${Environment}-custom-metrics"
      RetentionInDays: 90 # 本番環境では長期保存
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-custom-metrics"
        - Key: Environment
          Value: !Ref Environment

  # Slack 通知用 Lambda 関数（オプション）
  SlackNotificationFunction:
    Type: AWS::Lambda::Function
    Condition: HasSlackWebhook
    Properties:
      FunctionName: !Sub "${ProjectName}-${Environment}-slack-notification"
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt SlackNotificationRole.Arn
      Timeout: 30
      Environment:
        Variables:
          SLACK_WEBHOOK_URL: !Ref SlackWebhookUrl
          PROJECT_NAME: !Ref ProjectName
          ENVIRONMENT: !Ref Environment
      Code:
        ZipFile: |
          import json
          import urllib3
          import os

          def lambda_handler(event, context):
              """SNS メッセージを Slack に転送する（本番環境用）"""
              
              webhook_url = os.environ['SLACK_WEBHOOK_URL']
              project_name = os.environ['PROJECT_NAME']
              environment = os.environ['ENVIRONMENT']
              
              # SNS メッセージを解析
              message = json.loads(event['Records'][0]['Sns']['Message'])
              alarm_name = message.get('AlarmName', 'Unknown')
              new_state = message.get('NewStateValue', 'Unknown')
              reason = message.get('NewStateReason', 'No reason provided')
              
              # 本番環境では詳細な情報を含める
              color = 'danger' if new_state == 'ALARM' else 'good'
              emoji = '🚨' if new_state == 'ALARM' else '✅'
              
              # 緊急度を判定
              is_critical = 'error' in alarm_name.lower() or 'throttle' in alarm_name.lower()
              urgency = '🔥 CRITICAL' if is_critical else '⚠️ WARNING'
              
              slack_message = {
                  'attachments': [{
                      'color': color,
                      'title': f'{emoji} {urgency} - {project_name} ({environment})',
                      'fields': [
                          {
                              'title': 'アラーム名',
                              'value': alarm_name,
                              'short': True
                          },
                          {
                              'title': '状態',
                              'value': new_state,
                              'short': True
                          },
                          {
                              'title': '理由',
                              'value': reason,
                              'short': False
                          }
                      ],
                      'footer': 'AWS CloudWatch - Production Environment',
                      'ts': int(context.aws_request_id[:8], 16)
                  }]
              }
              
              # Slack に送信
              http = urllib3.PoolManager()
              response = http.request(
                  'POST',
                  webhook_url,
                  body=json.dumps(slack_message),
                  headers={'Content-Type': 'application/json'}
              )
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Critical notification sent to Slack')
              }
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-slack-notification"
        - Key: Environment
          Value: !Ref Environment

  # Slack 通知用 Lambda 実行ロール
  SlackNotificationRole:
    Type: AWS::IAM::Role
    Condition: HasSlackWebhook
    Properties:
      RoleName: !Sub "${ProjectName}-${Environment}-slack-notification-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-slack-notification-role"
        - Key: Environment
          Value: !Ref Environment

  # Slack 通知用 SNS サブスクリプション（クリティカル）
  SlackSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasSlackWebhook
    Properties:
      TopicArn: !Ref AlertTopic
      Protocol: lambda
      Endpoint: !GetAtt SlackNotificationFunction.Arn

  # Slack 通知用 SNS サブスクリプション（警告）
  SlackWarningSubscription:
    Type: AWS::SNS::Subscription
    Condition: HasSlackWebhook
    Properties:
      TopicArn: !Ref WarningTopic
      Protocol: lambda
      Endpoint: !GetAtt SlackNotificationFunction.Arn

  # Slack Lambda 実行権限（クリティカル）
  SlackLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: HasSlackWebhook
    Properties:
      FunctionName: !Ref SlackNotificationFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref AlertTopic

  # Slack Lambda 実行権限（警告）
  SlackLambdaWarningPermission:
    Type: AWS::Lambda::Permission
    Condition: HasSlackWebhook
    Properties:
      FunctionName: !Ref SlackNotificationFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref WarningTopic

Outputs:
  AlertTopicArn:
    Description: クリティカルアラート通知用 SNS トピック ARN
    Value: !Ref AlertTopic
    Export:
      Name: !Sub "${ProjectName}-${Environment}-alert-topic-arn"

  WarningTopicArn:
    Description: 警告レベル通知用 SNS トピック ARN
    Value: !Ref WarningTopic
    Export:
      Name: !Sub "${ProjectName}-${Environment}-warning-topic-arn"

  ApplicationMetricsLogGroupName:
    Description: アプリケーションメトリクス用ログ グループ名
    Value: !Ref ApplicationMetricsLogGroup
    Export:
      Name: !Sub "${ProjectName}-${Environment}-custom-metrics-log-group"

  SlackNotificationFunctionArn:
    Condition: HasSlackWebhook
    Description: Slack 通知用 Lambda 関数 ARN
    Value: !GetAtt SlackNotificationFunction.Arn
    Export:
      Name: !Sub "${ProjectName}-${Environment}-slack-notification-function-arn"

  MonitoringDashboardUrl:
    Description: CloudWatch ダッシュボード URL（手動作成後に更新）
    Value: !Sub "https://console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-${Environment}"
    Export:
      Name: !Sub "${ProjectName}-${Environment}-dashboard-url"
