#!/bin/bash

# CSR Lambda API System - AWS Setup Verification Script
# уБУуБоуВ╣уВпуГкуГЧуГИуБп AWS шинхоЪуБМцнгуБЧуБПшбМуВПуВМуБжуБДуВЛуБЛуВТчв║шкНуБЧуБ╛уБЩ

set -e

# шЙ▓ф╗ШуБНуГнуВ░хЗ║хКЫ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# шинхоЪ
PROJECT_NAME="csr-lambda-api"
AWS_REGION="ap-northeast-1"

echo "ЁЯФН AWS уВ╗уГГуГИуВвуГГуГЧчв║шкНуВ╣уВпуГкуГЧуГИ"
echo "=================================="
echo ""

# 1. AWS CLI уБочв║шкН
log_info "1. AWS CLI уБочв║шкН"
if command -v aws &> /dev/null; then
    AWS_VERSION=$(aws --version 2>&1 | cut -d' ' -f1)
    log_success "AWS CLI уБМуВдуГ│уВ╣уГИуГ╝уГлуБХуВМуБжуБДуБ╛уБЩ: $AWS_VERSION"
else
    log_error "AWS CLI уБМуВдуГ│уВ╣уГИуГ╝уГлуБХуВМуБжуБДуБ╛уБЫуВУ"
    echo "уВдуГ│уВ╣уГИуГ╝уГлцЦ╣ц│Х: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"
    exit 1
fi

echo ""

# 2. AWS шкНши╝цГЕха▒уБочв║шкН
log_info "2. AWS шкНши╝цГЕха▒уБочв║шкН"
if aws sts get-caller-identity > /dev/null 2>&1; then
    AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
    AWS_USER_ARN=$(aws sts get-caller-identity --query Arn --output text)
    log_success "AWS шкНши╝цГЕха▒уБМшинхоЪуБХуВМуБжуБДуБ╛уБЩ"
    log_info "  уВвуВлуВжуГ│уГИ ID: $AWS_ACCOUNT_ID"
    log_info "  уГжуГ╝уВ╢уГ╝ ARN: $AWS_USER_ARN"
else
    log_error "AWS шкНши╝цГЕха▒уБМшинхоЪуБХуВМуБжуБДуБ╛уБЫуВУ"
    log_info "шинхоЪцЦ╣ц│Х: aws configure"
    exit 1
fi

echo ""

# 3. х┐ЕшжБуБкцийщЩРуБочв║шкН
log_info "3. х┐ЕшжБуБкцийщЩРуБочв║шкН"

# CloudFormation цийщЩР
if aws cloudformation list-stacks --max-items 1 > /dev/null 2>&1; then
    log_success "CloudFormation цийщЩР: OK"
else
    log_error "CloudFormation цийщЩР: NG"
fi

# IAM цийщЩР
if aws iam list-roles --max-items 1 > /dev/null 2>&1; then
    log_success "IAM цийщЩР: OK"
else
    log_error "IAM цийщЩР: NG"
fi

# Lambda цийщЩР
if aws lambda list-functions --max-items 1 > /dev/null 2>&1; then
    log_success "Lambda цийщЩР: OK"
else
    log_error "Lambda цийщЩР: NG"
fi

# S3 цийщЩР
if aws s3 ls > /dev/null 2>&1; then
    log_success "S3 цийщЩР: OK"
else
    log_error "S3 цийщЩР: NG"
fi

echo ""

# 4. цЧвхнШуБоуВ╣уВ┐уГГуВпуБочв║шкН
log_info "4. цЧвхнШуБо CloudFormation уВ╣уВ┐уГГуВпуБочв║шкН"

ENVIRONMENTS=("dev" "staging" "prod")
for ENV in "${ENVIRONMENTS[@]}"; do
    STACK_NAME="${PROJECT_NAME}-${ENV}-iam-roles"
    if aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region "$AWS_REGION" > /dev/null 2>&1; then
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --region "$AWS_REGION" --query 'Stacks[0].StackStatus' --output text)
        log_success "$ENV чТ░хвГ IAM уВ╣уВ┐уГГуВп: $STACK_STATUS"
    else
        log_warning "$ENV чТ░хвГ IAM уВ╣уВ┐уГГуВп: цЬкф╜ЬцИР"
    fi
done

echo ""

# 5. GitHub уГкуГЭуВ╕уГИуГкуБочв║шкН
log_info "5. GitHub уГкуГЭуВ╕уГИуГкуБочв║шкН"
if [ -d ".git" ]; then
    REPO_URL=$(git remote get-url origin 2>/dev/null || echo "ф╕НцШО")
    CURRENT_BRANCH=$(git branch --show-current 2>/dev/null || echo "ф╕НцШО")
    log_success "Git уГкуГЭуВ╕уГИуГкуБМшинхоЪуБХуВМуБжуБДуБ╛уБЩ"
    log_info "  уГкуГЭуВ╕уГИуГк URL: $REPO_URL"
    log_info "  чП╛хЬиуБоуГЦуГйуГ│уГБ: $CURRENT_BRANCH"
else
    log_warning "Git уГкуГЭуВ╕уГИуГкуБМхИЭцЬЯхМЦуБХуВМуБжуБДуБ╛уБЫуВУ"
fi

echo ""

# 6. х┐ЕшжБуБкуГХуВбуВдуГлуБочв║шкН
log_info "6. х┐ЕшжБуБкуГХуВбуВдуГлуБочв║шкН"

REQUIRED_FILES=(
    "infrastructure/shared/iam-roles.yaml"
    "infrastructure/shared/iam-policies.json"
    "infrastructure/scripts/deploy-iam-roles.sh"
    ".github/workflows/dev-deploy.yml"
    ".github/workflows/staging-deploy.yml"
    ".github/workflows/prod-deploy.yml"
)

for FILE in "${REQUIRED_FILES[@]}"; do
    if [ -f "$FILE" ]; then
        log_success "$FILE: хнШхЬи"
    else
        log_error "$FILE: ф╕НхнШхЬи"
    fi
done

echo ""

# 7. цОихеиуБХуВМуВЛцмбуБоуВ╣уГЖуГГуГЧ
log_info "7. цОихеиуБХуВМуВЛцмбуБоуВ╣уГЖуГГуГЧ"
echo ""
echo "тЬЕ ц║ЦхВЩхоМф║ЖуБоха┤хРИ:"
echo "   1. IAM уГнуГ╝уГлуВТуГЗуГЧуГнуВд: ./infrastructure/scripts/deploy-iam-roles.sh dev"
echo "   2. GitHub Secrets уВТшинхоЪ"
echo "   3. GitHub Actions уГпуГ╝уВпуГХуГнуГ╝уВТхоЯшбМ"
echo ""
echo "тЭМ хХПщбМуБМуБВуВЛха┤хРИ:"
echo "   1. AWS шкНши╝цГЕха▒уВТчв║шкН: aws configure"
echo "   2. х┐ЕшжБуБкцийщЩРуВТчв║шкН"
echo "   3. уГЙуВнуГеуГбуГ│уГИуВТхПВчЕз: infrastructure/docs/AWS-SETUP-GUIDE.md"
echo ""

# 8. шинхоЪуВ╡уГЮуГкуГ╝
log_info "8. шинхоЪуВ╡уГЮуГкуГ╝"
echo "  уГЧуГнуВ╕уВзуВпуГИхРН: $PROJECT_NAME"
echo "  AWS уГкуГ╝уВ╕уГзуГ│: $AWS_REGION"
echo "  AWS уВвуВлуВжуГ│уГИ: $AWS_ACCOUNT_ID"
echo ""

log_success "AWS уВ╗уГГуГИуВвуГГуГЧчв║шкНуБМхоМф║ЖуБЧуБ╛уБЧуБЯя╝Б"